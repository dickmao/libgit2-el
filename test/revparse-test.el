(ert-deftest revparse ()
  (let (c1 c2 c3)
    (with-temp-dir path
      (init)
      (commit-change "file" "abcdef")
      (setq c1 (rev-parse))
      (commit-change "file" "ghijkl")
      (setq c2 (rev-parse))
      (commit-change "file" "mnopqr")
      (setq c3 (rev-parse))
      (let* ((repo (libgit2-repository-open path)))
        (should (string= c3 (libgit2-commit-id (libgit2-revparse-single repo "HEAD"))))
        (should (string= c2 (libgit2-commit-id (libgit2-revparse-single repo "HEAD~"))))
        (should (string= c2 (libgit2-commit-id (libgit2-revparse-single repo "HEAD^"))))
        (should (string= (libgit2-commit-tree-id (libgit2-commit-lookup repo c1))
                         (libgit2-tree-id (libgit2-revparse-single repo "HEAD~2^{tree}"))))
        (let ((res (libgit2-revparse-ext repo "HEAD")))
          (should (string= c3 (libgit2-commit-id (car res))))
          (should (libgit2-reference-p (cdr res)))
          (should (string= "refs/heads/master" (libgit2-reference-name (cdr res)))))
        (let ((res (libgit2-revparse-ext repo c1)))
          (should (string= c1 (libgit2-commit-id (car res))))
          (should-not (cdr res)))
        (let ((res (libgit2-revparse repo (format "%s..HEAD" c1))))
          (should-not (car res))
          (should (string= c1 (libgit2-commit-id (cadr res))))
          (should (string= c3 (libgit2-commit-id (caddr res)))))
        (let ((res (libgit2-revparse repo (format "%s...%s" c1 c2))))
          (should (car res))
          (should (string= c1 (libgit2-commit-id (cadr res))))
          (should (string= c2 (libgit2-commit-id (caddr res)))))))))

(ert-deftest revparse-negative ()
  (let (c1 c2 c3)
    (with-temp-dir path
      (init)
      (commit-change "file1" "abcdef")
      (let ((repo (libgit2-repository-open path)))
        (should-error (libgit2-revparse-single repo "HEADDDD")
		      :type 'giterr-reference)
	(commit-change "file2" "abcdef")
	(checkout "HEAD^")
	(should (libgit2-revparse-single repo "@{-1}"))
	(should-error (libgit2-revparse-single repo "@{-2}")
		      :type 'giterr-reference)))))
